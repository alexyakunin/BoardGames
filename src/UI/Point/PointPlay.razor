@attribute [MatchFor(typeof(PointGameEngine), ComponentScopes.GamePlay)]
@inherits GamePlayBase

@{
    var gameEngine = (PointGameEngine) GameEngine;
    var gameState = gameEngine.DeserializeState(Game.StateJson);
    var playersCards = gameState.PlayersCards;
    var playerStatuses = gameState.Statuses;
    var myCards = playersCards[MyPlayerIndex];
    var scores = gameState.Scores;
    var totalScores = gameState.TotalScores;
    var playerIndexes = Enumerable.Range(0, Game.Players.Count).ToList();
    playerIndexes.RemoveAt(MyPlayerIndex);
    playerIndexes.Insert(0, MyPlayerIndex);
}

<WhenCommandError Exception="CommandRunner.Error"/>

@if (Game.Stage != GameStage.Ended) {
    <Paragraph>
        <Button Color="Color.Primary"
                Style="align-content: center; border-radius: 3px;"
                disabled="@(gameState.PlayerIndex != MyPlayerIndex
                            || playerStatuses[gameState.PlayerIndex] == Status.Finished)"
                @onclick="_ => GetCardAsync()">
            Get Card
        </Button>
        <Button Color="Color.Dark"
                Style="align-content: center; border-radius: 3px;"
                disabled="@(gameState.PlayerIndex != MyPlayerIndex
                            || playerStatuses[gameState.PlayerIndex] == Status.Finished)"
                @onclick="_ => ChangePlayerStatusAsync()">
            Enough
        </Button>
        <Buttons>
            <Button Color="Color.Primary" disabled
                    style="border-bottom-left-radius: 3px; border-top-left-radius: 3px;">
                Current:
            </Button>
            <Button Color="Color.Primary" Outline="true" disabled>
                @scores[MyPlayerIndex]
            </Button>
            <Button Color="Color.Primary" disabled>
                Total:
            </Button>
            <Button Color="Color.Primary" Outline="true" disabled
                    style="border-bottom-right-radius: 3px; border-top-right-radius: 3px;">
                @totalScores[playerIndexes[0]]
            </Button>
        </Buttons>
    </Paragraph>
}

<Row><Column ColumnSize="ColumnSize.Is6">
        <table><tbody><tr>
            @foreach (var card in myCards) {
                <td @key=@card.Id class="p-0 m-0">
                    <div align="center"
                         style="width: 60pt; height: 90pt; margin: 5pt;;
                     border: 2px solid black; border-radius: 5pt;">
                        <div style="margin-top: 20%;">
                            <p style="vertical-align: center; font-size: 200%;">@GetCardSuit(card.Suit)</p>
                        </div>
                        <div>
                            <p style="vertical-align: center; font-weight: bold;">@card.Rank</p>
                        </div>
                    </div>
                </td>
            }
        </tr></tbody></table>
    </Column>
</Row>

<Heading Size="HeadingSize.Is4">Choices</Heading>
<Table Narrow="true" Striped="true">
    <TableHeader>
        <TableHeaderCell Style="width: auto">Player</TableHeaderCell>
        <TableHeaderCell Style="width: 20%">Score</TableHeaderCell>
        <TableHeaderCell Style="width: 20%">Finished?</TableHeaderCell>
    </TableHeader>
    <TableBody>
        @foreach (var playerIndex in playerIndexes) {
            var player = Game.Players[playerIndex];
            var score = totalScores[playerIndex];
            <TableRow @key="@playerIndex">
                <TableRowCell>
                    <AppUserBadge User="@Users[player.UserId]"/>
                </TableRowCell>
                <TableRowCell>
                    <Badge Color="@(playerIndex == MyPlayerIndex ? Color.Primary : Color.Secondary)"
                           Style="font-size: 1.25rem">@score</Badge>
                </TableRowCell>
                <TableRowCell>
                    <Blazorise.Icon Name="GetPlayerStatus(playerStatuses[playerIndex])" IconStyle="IconStyle.Regular" Style="font-size: 1.5rem" />
                </TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

@code {
    private Task GetCardAsync()
    {
        var move = new PointGameMove(false);
        var command = new Game.MoveCommand(Session, Game.Id, move);
        return CommandRunner.Call(command);
    }

    private Task ChangePlayerStatusAsync()
    {
        var skip = new PointGameMove(true);
        var command = new Game.MoveCommand(Session, Game.Id, skip);
        return CommandRunner.Call(command);
    }

    private MarkupString GetCardSuit(CardSuit suit)
    {
        Dictionary<CardSuit, string> _suits = new Dictionary<CardSuit, string>();
        _suits.Add(CardSuit.Spades, "&spades;");
        _suits.Add(CardSuit.Clubs, "&clubs;");
        _suits.Add(CardSuit.Hearts, "&hearts;");
        _suits.Add(CardSuit.Diamonds, "&diams;");;
        return (MarkupString)_suits[suit];
    }
    
    private object GetPlayerStatus(Status playerStatus)
        => playerStatus switch {
            Status.Active => FontAwesomeIcons.Square,
            _ => FontAwesomeIcons.CheckSquare,
            };
}